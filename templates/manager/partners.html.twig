{% extends 'base.html.twig' %}

{% block title %}
    {{ parent() }} - Partenaires
{% endblock %}

{% block content %}
<div class="page">
    <div class="table-container-traitements">
        <div class="header">
            <h2>Partenaires</h2>
            <p>
                <a href="https://www.example.com" target="_blank">
                    En savoir plus sur nos partenaires
                </a>
            </p>
        </div>

        <!-- Search and Action Buttons -->
        <div style="display: flex; justify-content: space-between; width: 100%;">
            <div class="search-bar">
                <span class="search-icon">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </span>
                <input type="text" id="searchInput" placeholder="Rechercher" />
            </div>
            <div class="buttons">
                <div class="exporter">
                    <a href="{{ path('manager_partners_add') }}" class="btn btn-primary">Créer un partenaire</a>
                </div>
            </div>
        </div>

        <!-- Data Table -->
        <table class="styled-table" id="datatable">
            <thead>
                <tr>
                    <th>Logo</th>
                    <th>Nom</th>
                    <th style="text-align: left;">Description</th>
                    <th class="actionss">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for partner in partners %}
                    <tr>
                        <td><div class="avatar avatar-sm"><img src="{{ asset('uploads/pictures/' ~ partner.getPicture) }}" class="avatar-img">
</div></td>
                        <td>{{ partner.name }}</td>
                        <td style="text-align: left;">{{ partner.description }}</td>
                        <td>
                            <div class="options">
                                <a href="{{ path('manager_partners_edit', {'id': partner.id}) }}" class="btn btn-secondary">
                                    <button class="edit"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                                </a>
                                <a href="{{ path('manager_partners_delete', {'id': partner.id}) }}" class="btn btn-danger" onclick="return confirm('Confirmer la suppression de ce partenaire ?');">
                                    <button class="delete"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="currentColor" d="M7 4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2h4a1 1 0 1 1 0 2h-1.069l-.867 12.142A2 2 0 0 1 17.069 22H6.93a2 2 0 0 1-1.995-1.858L4.07 8H3a1 1 0 0 1 0-2h4zm2 2h6V4H9zM6.074 8l.857 12H17.07l.857-12zM10 10a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1m4 0a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1"/></svg></button>
                                </a>
                            </div>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="pagination-container">
            <!-- Results per page selector -->
            <div class="results-per-page">
                <label for="resultsSelect">Afficher</label>
                <select id="resultsSelect" class="results-select">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                </select>
                <span>résultats par page</span>
            </div>

            <!-- Pagination Controls -->
            <div class="pagination-controls">
                <button class="pagination-button" id="prevPage" disabled>&lt;</button>
                <span class="pagination-info" id="paginationInfo">Page 1 sur 1</span>
                <button class="pagination-button" id="nextPage" disabled>&gt;</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
    const table = document.getElementById('datatable');
    const rows = Array.from(table.querySelectorAll('tbody tr'));
    const resultsSelect = document.getElementById('resultsSelect');
    const paginationInfo = document.getElementById('paginationInfo');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const searchInput = document.getElementById('searchInput');

    let currentPage = 1;
    let resultsPerPage = parseInt(resultsSelect.value);
    let filteredRows = [...rows]; // Copy to avoid modifying the original dataset

    function updateTable() {
        const totalPages = Math.ceil(filteredRows.length / resultsPerPage) || 1;
        const start = (currentPage - 1) * resultsPerPage;
        const end = start + resultsPerPage;

        // Hide all rows first
        rows.forEach(row => row.style.display = 'none');

        // Show only the rows for the current page
        filteredRows.slice(start, end).forEach(row => row.style.display = '');

        paginationInfo.textContent = `Page ${currentPage} sur ${totalPages}`;
        prevPage.disabled = currentPage === 1;
        nextPage.disabled = currentPage >= totalPages;
    }

    function filterTable() {
        const query = searchInput.value.toLowerCase();
        filteredRows = rows.filter(row => row.innerText.toLowerCase().includes(query));
        currentPage = 1; // Reset pagination to first page after search
        updateTable();
    }

    resultsSelect.addEventListener('change', function () {
        resultsPerPage = parseInt(this.value);
        currentPage = 1;
        updateTable();
    });

    prevPage.addEventListener('click', function () {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
        }
    });

    nextPage.addEventListener('click', function () {
        const totalPages = Math.ceil(filteredRows.length / resultsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            updateTable();
        }
    });

    searchInput.addEventListener('input', filterTable);

    // Initialize table
    updateTable();
});

</script>
{% endblock %}
