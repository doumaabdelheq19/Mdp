{% extends 'base.html.twig' %}

{% block title %}
    {{ parent() }} - Crédits
{% endblock %}

{% block content %}
<div class="page">
    <div class="table-container-traitements">
        <div class="header">
            <h2>Gestion des crédits - {{ user.companyName }}</h2>
        </div>

        <!-- Search and Action Buttons -->
        <div style="display: flex; justify-content: space-between; width: 100%;">
            <div class="search-bar">
                <span class="search-icon">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </span>
                <input type="text" id="searchInput" placeholder="Rechercher" />
            </div>
            <div class="buttons">
                <div class="exporter">
                    <a href="#" data-toggle="modal" data-target="#AddSubscriptionModal" class="btn btn-primary">Ajouter un crédit</a>
                </div>
            </div>
        </div>

        <!-- Data Table -->
        <table class="styled-table" id="datatable">
            <thead>
                <tr>
                    <th>Date d'ajout</th>
                    <th>Action</th>
                    <th>Ajouté par</th>
                    <th>Stock</th>
                </tr>
            </thead>
            <tbody>
                {% for credit in credits %}
                    <tr>
                        <td>{{ credit.creationDate|date('d/m/Y') }}</td>
                        <td>{{ credit.title }}</td>
                        <td>
                            {% if credit.manager %}
                                {{ credit.manager.firstName }} {{ credit.manager.lastName }}
                            {% else %}
                                -
                            {% endif %}
                        </td>
                        <td>{{ credit|format_stock_number }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="pagination-container">
            <div class="results-per-page">
                <label for="resultsSelect">Afficher</label>
                <select id="resultsSelect" class="results-select">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                </select>
                <span>résultats par page</span>
            </div>

            <div class="pagination-controls">
                <button class="pagination-button" id="prevPage" disabled>&lt;</button>
                <span class="pagination-info" id="paginationInfo">Page 1 sur 1</span>
                <button class="pagination-button" id="nextPage" disabled>&gt;</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Adding Credit -->
<div class="modal fade" id="AddSubscriptionModal" tabindex="-1" role="dialog" aria-labelledby="AddSubscriptionModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Ajouter un crédit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Fermer">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                {{ form_start(form, {"attr": {"class": "needs-validation", "enctype": "multipart/form-data"}}) }}

                <div class="form-row">
                    <div class="form-group col-12" >
                          {{ form_label(form.title, null, {'label_attr': {'style': 'align-content : center; margin-right:15px'}}) }}
                        {{ form_widget(form.title, {'attr': {'class': 'form-control ' ~ ((form_errors(form.title) == '') ? '' : 'is-invalid')} }) }}
                        <div class="invalid-feedback">{{ form_errors(form.title) | striptags  }}</div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-12">
                      {{ form_label(form.stock, null, {'label_attr': {'style': 'align-content : center; margin-right:15px'}}) }}

                        {{ form_widget(form.stock, {'attr': {'class': 'form-control ' ~ ((form_errors(form.stock) == '') ? '' : 'is-invalid')} }) }}
                        <div class="invalid-feedback">{{ form_errors(form.stock) | striptags  }}</div>
                    </div>
                </div>

                <div class="form-group " style="text-align: center">
                    <button type="submit" class="exporter" style="width:100%  ">Ajouter</button>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const table = document.getElementById('datatable');
    const headers = table.querySelectorAll('thead th');
    const rows = Array.from(table.querySelectorAll('tbody tr'));
    const resultsSelect = document.getElementById('resultsSelect');
    const paginationInfo = document.getElementById('paginationInfo');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const searchInput = document.getElementById('searchInput');

    let currentPage = 1;
    let resultsPerPage = parseInt(resultsSelect.value);
    let filteredRows = [...rows]; 
    let sortColumn = -1;
    let sortDirection = 1;

    function updateTable() {
        const totalPages = Math.ceil(filteredRows.length / resultsPerPage) || 1;
        currentPage = Math.min(currentPage, totalPages);

        const start = (currentPage - 1) * resultsPerPage;
        const end = start + resultsPerPage;

        rows.forEach(row => row.style.display = 'none');
        filteredRows.slice(start, end).forEach(row => row.style.display = '');

        paginationInfo.textContent = `Page ${currentPage} sur ${totalPages}`;
        prevPage.disabled = currentPage === 1;
        nextPage.disabled = currentPage >= totalPages;
    }

    function filterTable() {
        const query = searchInput.value.toLowerCase();
        filteredRows = rows.filter(row => row.innerText.toLowerCase().includes(query));
        currentPage = 1;

        if (sortColumn !== -1) {
            sortTable(sortColumn, false);
        }

        updateTable();
    }

    function sortTable(columnIndex, resetPage = true) {
        if (sortColumn === columnIndex) {
            sortDirection *= -1;
        } else {
            sortColumn = columnIndex;
            sortDirection = 1;
        }

        filteredRows.sort((a, b) => {
            const aText = a.children[columnIndex].innerText.trim().toLowerCase();
            const bText = b.children[columnIndex].innerText.trim().toLowerCase();
            return aText.localeCompare(bText, 'fr', { numeric: true }) * sortDirection;
        });

        headers.forEach(th => th.classList.remove('sorting_asc', 'sorting_desc'));
        headers[columnIndex].classList.add(sortDirection === 1 ? 'sorting_asc' : 'sorting_desc');

        if (resetPage) currentPage = 1;
        updateTable();
    }

    headers.forEach((th, index) => {
        th.style.cursor = 'pointer';
        th.addEventListener('click', () => sortTable(index));
    });

    resultsSelect.addEventListener('change', function () {
        resultsPerPage = parseInt(this.value);
        currentPage = 1;
        updateTable();
    });

    prevPage.addEventListener('click', function () {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
        }
    });

    nextPage.addEventListener('click', function () {
        const totalPages = Math.ceil(filteredRows.length / resultsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            updateTable();
        }
    });

    searchInput.addEventListener('input', filterTable);

    updateTable();
});
</script>
{% endblock %}
