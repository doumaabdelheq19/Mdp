{% extends 'base.html.twig' %}

{% block title %}
    {{ parent() }} - Gestion des Sociétés
{% endblock %}

{% block content %}
<div class="page">
    <div class="table-container-traitements">
        <div class="header">
            <h2>Gestion des Sociétés</h2>
        </div>

        <!-- Search & Action Buttons -->
        <div style="display: flex; justify-content: space-between; width: 100%; margin-bottom: 20px;">
            <div class="search-bar">
                <span class="search-icon">
                    <i class="fa fa-search"></i>
                </span>
                <input type="text" id="searchInput" placeholder="Rechercher une société..." />
            </div>
            <div class="buttons">
                {% if is_granted('ROLE_DPO') %}
                    <a href="{{ path('manager_users_add') }}" class="exporter" style="color:white">Ajouter une société</a>
                {% endif %}
                {% if is_granted('ROLE_ADMIN') %}
                    <a href="{{ path('manager_subscriptions_export') }}" class="gerer" style="color:#438492">Exporter les abonnements</a>
                {% endif %}
            </div>
        </div>
 <div class="table-responsive">
        <!-- Companies Table -->
        <table class="styled-table" id="datatable">
            <thead>
                <tr>
                    <th>Société</th>
                    <th>Email</th>
                    <th>Téléphone</th>
                    <th>Adresse</th>
                    <th>Contact</th>
                    <th>Délégué</th>
                    <th>Création</th>
                    <th>Abonnement</th>
                    <th>Crédits</th>
                    <th>Actif</th>
                    <th class="actionss">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user in users %}
                    <tr>
                        <td>{{ user.companyName }}</td>
                        <td style="color:#EF6D6F">{{ user.email }}</td>
                        <td>{{ user.phone }}</td>
                        <td style="color:#438492">
                            {{ user.address }}{% if user.address2 %}, {{ user.address2 }}{% endif %}<br/>
                            {{ user.zipCode }}, {{ user.city }}
                        </td>
                        <td>{{ user.contactFirstName }} {{ user.contactLastName }}</td>
                        <td>{% if user.manager %}{{ user.manager.firstName }} {{ user.manager.lastName }}{% endif %}</td>
                       <td style="color:#EF6D6F">
    {% if user.account is not null and user.account.registrationDate is not null %}
        {{ user.account.registrationDate|date('d/m/Y') }}
    {% else %}
        <span class="text-muted">N/A</span>
    {% endif %}
</td>

                        <td>
                            {% if is_granted('ROLE_ADMIN') %}
                                <a href="{{ path('manager_subscriptions_user', {'id': user.id}) }}">
                            {% endif %}
                            {% if user.currentSubscription and user.currentSubscription.active %}
                                <span class="badge badge-success" data-toggle="tooltip" data-placement="top" title="{{ user.currentSubscription.type.libelle }}">{{ user.currentSubscription.type.code }}</span>
                            {% else %}
                                <span class="badge badge-danger">Aucun</span>
                            {% endif %}
                            {% if is_granted('ROLE_ADMIN') %}
                                </a>
                            {% endif %}
                        </td>
                        <td>
                            {% if is_granted('ROLE_MANAGER') %}
                                <a href="{{ path('manager_credits_user', {'id': user.id}) }}">
                            {% endif %}
                                <span class="badge badge-primary">{{ user.credit|format_credit_number }}</span>
                            {% if is_granted('ROLE_MANAGER') %}
                                </a>
                            {% endif %}
                        </td>
                      <td>
    {% if user.account is not null and user.account.enabled is not null %}
        {% if user.account.enabled %}
            <span class="badge badge-success">OUI</span>
        {% else %}
            <span class="badge badge-danger">NON</span>
        {% endif %}
    {% else %}
        <span class="text-muted">N/A</span>
    {% endif %}
</td>

                        <td>
                            <div class="options">
                                <a href="{{ path('manager_users_edit', {'id': user.id}) }}" class="btn btn-secondary">
                                    <button class="edit"><i class="fa fa-pencil-square-o"></i></button>
                                </a>
                                <a href="{{ path('manager_users_print', {'id': user.id}) }}" target="_blank" class="btn btn-secondary">
                                    <button class="edit"><i class="mdi mdi-printer"></i> </button>
                                </a>
                               
                                <a href="{{ path('manager_login_logs', {'user': user.id}) }}" class="btn btn-secondary">
                                    <button class="edit"><i class="mdi mdi-account-details"></i></button>
                                </a>
                                 {% if is_granted('ROLE_DPO') %}
                                    <a href="{{ path('manager_users_delete', {'id': user.id}) }}" class="btn btn-danger" onclick="return confirm('Confirmer la suppression de cette société ?\nToutes les données associées seront effacées. Cette action est irréversible.');">
                                        <button class="delete"><i class="fa fa-trash"></i></button>
                                    </a>
                                {% endif %}
                               
                            </div>
                            <div class="options">
                             <a style="width:100%; margin-top:3px" href="{{ path('manager_user_switch', {'id': user.id}) }}" class="btn btn-outline-primary">
                                    <button class="exporter" style="background-color: #438492;"> Se connecter</button>
                                </a>
                                </div>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
</div>
        <!-- Pagination -->
        <div class="pagination-container">
            <div class="results-per-page">
                <label for="resultsSelect">Afficher</label>
                <select id="resultsSelect" class="results-select">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                </select>
                <span>résultats par page</span>
            </div>

            <div class="pagination-controls">
                <button class="pagination-button" id="prevPage" disabled>&lt;</button>
                <span class="pagination-info" id="paginationInfo">Page 1 sur 1</span>
                <button class="pagination-button" id="nextPage" disabled>&gt;</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const table = document.getElementById('datatable');
        const headers = table.querySelectorAll('thead th');
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const resultsSelect = document.getElementById('resultsSelect');
        const paginationInfo = document.getElementById('paginationInfo');
        const prevPage = document.getElementById('prevPage');
        const nextPage = document.getElementById('nextPage');
        const searchInput = document.getElementById('searchInput');

        let currentPage = 1;
        let resultsPerPage = parseInt(resultsSelect.value);
        let filteredRows = [...rows];
        let sortColumn = -1;
        let sortDirection = 1; // 1 for ascending, -1 for descending

        function updateTable() {
            const totalPages = Math.ceil(filteredRows.length / resultsPerPage);
            currentPage = Math.min(currentPage, totalPages) || 1;

            const start = (currentPage - 1) * resultsPerPage;
            const end = start + resultsPerPage;

            tbody.innerHTML = ''; // Clear table body before re-adding rows

            filteredRows.slice(start, end).forEach(row => tbody.appendChild(row));

            paginationInfo.textContent = `Page ${currentPage} sur ${totalPages || 1}`;
            prevPage.disabled = currentPage === 1;
            nextPage.disabled = currentPage === totalPages || totalPages === 0;
        }

        function filterTable() {
            const query = searchInput.value.toLowerCase().trim();
            filteredRows = rows.filter(row => row.innerText.toLowerCase().includes(query));
            currentPage = 1;
            updateTable();
        }

        function sortTable(columnIndex) {
            if (sortColumn === columnIndex) {
                sortDirection *= -1; // Toggle sorting order
            } else {
                sortColumn = columnIndex;
                sortDirection = 1;
            }

            filteredRows.sort((a, b) => {
                const aText = a.children[columnIndex]?.innerText.trim().toLowerCase() || '';
                const bText = b.children[columnIndex]?.innerText.trim().toLowerCase() || '';

                return aText.localeCompare(bText, 'fr', { numeric: true }) * sortDirection;
            });

            headers.forEach(th => th.classList.remove('sorting_asc', 'sorting_desc'));
            headers[columnIndex].classList.add(sortDirection === 1 ? 'sorting_asc' : 'sorting_desc');

            updateTable();
        }

        headers.forEach((th, index) => {
            th.style.cursor = 'pointer';
            th.addEventListener('click', () => sortTable(index));
        });

        resultsSelect.addEventListener('change', function () {
            resultsPerPage = parseInt(this.value);
            currentPage = 1;
            updateTable();
        });

        prevPage.addEventListener('click', function () {
            if (currentPage > 1) {
                currentPage--;
                updateTable();
            }
        });

        nextPage.addEventListener('click', function () {
            const totalPages = Math.ceil(filteredRows.length / resultsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                updateTable();
            }
        });

        searchInput.addEventListener('input', filterTable);

        updateTable();
      });
    </script>
{% endblock %}

