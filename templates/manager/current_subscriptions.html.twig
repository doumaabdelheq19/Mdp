{% extends 'base.html.twig' %}

{% block title %}
	{{ parent() }}
	-
	{{ 'Abonnements'|trans }}
{% endblock %}

{% block content %}
	<div class="page">
		<div class="table-container-traitements">
			<div class="header">
				<h2>{{ 'Abonnements'|trans }}</h2>
			</div>

			<!-- Search and Action Buttons -->
			<div class="search-container">
				<div class="search-bar">
					<span class="search-icon">
						<i class="fa fa-search" aria-hidden="true"></i>
					</span>
					<input type="text" id="searchInput" placeholder="{{ 'Rechercher'|trans }}"/>
				</div>
			</div>

			<!-- Data Table -->
			<table class="styled-table" id="datatable">
				<thead>
					<tr>
						<th>{{ 'Société'|trans }}</th>
						<th>{{ 'Offre souscrite'|trans }}</th>
						<th>{{ 'Date démarrage'|trans }}</th>
						<th>{{ 'Date de fin'|trans }}</th>
						<th>{{ 'Prochaine facturation'|trans }}</th>
						<th>{{ 'Facturation'|trans }}</th>
						<th>{{ 'Accès'|trans }}</th>
						<th>{{ 'État'|trans }}</th>
						<th class="actionss">{{ 'Actions'|trans }}</th>
					</tr>
				</thead>
				<tbody>
					{% for user in users %}
						{% set subscription = user.currentSubscription %}
						<tr>
							<td>{{ user.companyName }}</td>
							<td>
								{% if subscription %}
									{% if subscription.type %}
										<span class="badge badge-info" data-toggle="tooltip" data-placement="top" title="{{ subscription.type.libelle }}">{{ subscription.type.code }}</span>
									{% else %}
										{{ subscription.offer }}
									{% endif %}
								{% endif %}
							</td>
							<td>
								{% if subscription %}
									{{ subscription.beginDate|date('d/m/Y') }}
								{% endif %}
							</td>
							<td>
								{% if subscription %}
									{{ subscription.endDate|date('d/m/Y') }}
								{% endif %}
							</td>
							<td class="text-align-center">
								{% if subscription %}
									{{ subscription.paymentUntil ? subscription.paymentUntil|date('d/m/Y') : '-' }}
									{% if subscription.active and (subscription.paymentUntil is null or subscription.paymentUntil < now) %}
										<br>
										<a href="{{ path('manager_subscriptions_user_payment', {'user': user.id, 'subscription': subscription.id}) }}" class="imprimer subs-imp" >
											{{ 'Renouveler'|trans }}
										</a>
									{% endif %}
								{% endif %}
							</td>
							<td>
								{% if subscription %}
									{{ subscription.billingMonths == 12 ? 'Annuelle' : (subscription.billingMonths == 3 ? 'Trimestrielle' : 'Mensuelle') }}
									-
									{{ subscription.unitBillingPrice }}€
								{% endif %}
							</td>
							<td>
								{% if subscription %}
									<span class="badge {{ is_active_subscription(user, subscription) ? 'badge-success' : 'badge-danger' }}">
										{{ is_active_subscription(user, subscription) ? 'OUI'|trans : 'NON'|trans }}
									</span>
								{% endif %}
							</td>
							<td>
								{% if subscription %}
									<span class="badge
											                                    {{ not subscription.active ? 'badge-danger' :
											                                       (is_active_subscription(user, subscription) ? 'badge-success' : 'badge-warning') }}">
										{{ not subscription.active ? 'Archivé'|trans : 
                                       (is_active_subscription(user, subscription) ? 'En cours'|trans : 'Expiré'|trans) }}
									</span>
								{% endif %}
							</td>
							<td>
								<div class="options">
									{% if subscription %}
										{% if subscription.active %}
											<a href="{{ path('manager_subscriptions_user_disable', {'user': user.id, 'subscription': subscription.id}) }}" class="btn btn-danger btn-sm" onclick="return confirm('{{ 'Confirmer la désactivation de cet abonnement ?'|trans }}');">
												<button class="delete">
													<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewbox="0 0 24 24">
														<path fill="currentColor" d="M7 4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2h4a1 1 0 1 1 0 2h-1.069l-.867 12.142A2 2 0 0 1 17.069 22H6.93a2 2 0 0 1-1.995-1.858L4.07 8H3a1 1 0 0 1 0-2h4zm2 2h6V4H9zM6.074 8l.857 12H17.07l.857-12zM10 10a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1m4 0a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1"/>
													</svg>
												</button>
											</a>
										{% endif %}
									{% endif %}
								</div>
							</td>
						</tr>
					{% endfor %}
				</tbody>
			</table>

			<!-- Pagination -->
			<div class="pagination-container">
				<div class="results-per-page">
					<label for="resultsSelect">{{ 'Afficher'|trans }}</label>
					<select id="resultsSelect" class="results-select">
						<option value="5">5</option>
						<option value="10" selected>10</option>
						<option value="20">20</option>
					</select>
					<span>{{ 'résultats par page'|trans }}</span>
				</div>
				<div class="pagination-controls">
					<button class="pagination-button" id="prevPage" disabled>&lt;</button>
					<span class="pagination-info" id="paginationInfo">{{ 'Page 1 sur 1'|trans }}</span>
					<button class="pagination-button" id="nextPage" disabled>&gt;</button>
				</div>
			</div>
		</div>
	</div>


	 <script>
	document.addEventListener('DOMContentLoaded', function () {
	    const table = document.getElementById('datatable');
	    const tableBody = table.querySelector("tbody");
	    const headers = table.querySelectorAll('thead th');
	    const rows = Array.from(table.querySelectorAll('tbody tr'));
	    const resultsSelect = document.getElementById('resultsSelect');
	    const paginationInfo = document.getElementById('paginationInfo');
	    const prevPage = document.getElementById('prevPage');
	    const nextPage = document.getElementById('nextPage');
	    const searchInput = document.getElementById('searchInput');
	
	    let currentPage = 1;
	    let resultsPerPage = parseInt(resultsSelect.value);
	    let filteredRows = [...rows];
	    let sortColumn = -1;
	    let sortDirection = 1; // 1 = ascending, -1 = descending
	
	    function updateTable() {
	        const totalPages = Math.ceil(filteredRows.length / resultsPerPage);
	        const start = (currentPage - 1) * resultsPerPage;
	        const end = start + resultsPerPage;
	
	        // Clear table body and re-add sorted rows (only the visible ones)
	        tableBody.innerHTML = "";
	        filteredRows.slice(start, end).forEach(row => tableBody.appendChild(row));
	
	        paginationInfo.textContent = `Page ${currentPage} sur ${totalPages || 1}`;
	        prevPage.disabled = currentPage === 1;
	        nextPage.disabled = currentPage === totalPages || totalPages === 0;
	    }
	
	    function filterTable() {
	        const query = searchInput.value.toLowerCase();
	        filteredRows = rows.filter(row => row.innerText.toLowerCase().includes(query));
	        currentPage = 1;
	        updateTable();
	    }
	
	    function sortTable(columnIndex) {
	        if (sortColumn === columnIndex) {
	            sortDirection *= -1; // Toggle sorting order
	        } else {
	            sortColumn = columnIndex;
	            sortDirection = 1;
	        }
	
	        function parseDate(value) {
	            const parts = value.split("/");
	            if (parts.length === 3) {
	                const day = parts[0].padStart(2, "0");
	                const month = parts[1].padStart(2, "0");
	                const year = parts[2];
	                return parseInt(`${year}${month}${day}`, 10);
	            }
	            return null;
	        }
	
	        function parseValue(text) {
	            const trimmedText = text.trim();
	
	            if (/^\d{2}\/\d{2}\/\d{4}$/.test(trimmedText)) {
	                return parseDate(trimmedText);
	            }
	
	            const num = parseFloat(trimmedText.replace(/,/g, ""));
	            if (!isNaN(num)) {
	                return num;
	            }
	
	            return trimmedText;
	        }
	
	        function compareRows(a, b) {
	            const aText = a.children[columnIndex].innerText.trim();
	            const bText = b.children[columnIndex].innerText.trim();
	
	            const aValue = parseValue(aText);
	            const bValue = parseValue(bText);
	
	            console.log(`Comparing: "${aText}" (${aValue}) vs "${bText}" (${bValue})`);
	
	            if (aValue === null && bValue !== null) return 1 * sortDirection;
	            if (aValue !== null && bValue === null) return -1 * sortDirection;
	            if (aValue === null && bValue === null) return 0;
	
	            if (typeof aValue === "number" && typeof bValue === "number") {
	                return (aValue - bValue) * sortDirection;
	            }
	
	            return String(aValue).localeCompare(String(bValue), undefined, { numeric: true }) * sortDirection;
	        }
	
	        console.log("Before Sorting:", filteredRows.map(row => row.children[columnIndex].innerText.trim()));
	
	        // Perform sorting
	        filteredRows.sort(compareRows);
	
	        console.log("After Sorting:", filteredRows.map(row => row.children[columnIndex].innerText.trim()));
	
	        // Remove sorting classes from all headers
	        headers.forEach(th => th.classList.remove('sorting_asc', 'sorting_desc'));
	        headers[columnIndex].classList.add(sortDirection === 1 ? 'sorting_asc' : 'sorting_desc');
	
	        updateTable();
	    }
	
	    headers.forEach((th, index) => {
	        th.style.cursor = 'pointer';
	        th.addEventListener('click', () => sortTable(index));
	    });
	
	    resultsSelect.addEventListener('change', function () {
	        resultsPerPage = parseInt(this.value);
	        currentPage = 1;
	        updateTable();
	    });
	
	    prevPage.addEventListener('click', function () {
	        if (currentPage > 1) {
	            currentPage--;
	            updateTable();
	        }
	    });
	
	    nextPage.addEventListener('click', function () {
	        const totalPages = Math.ceil(filteredRows.length / resultsPerPage);
	        if (currentPage < totalPages) {
	            currentPage++;
	            updateTable();
	        }
	    });
	
	    searchInput.addEventListener('input', filterTable);
	
	    updateTable();
	});
	
	
	</script>
{% endblock %}
